REPORT ZGB_CONVERSE.

CLASS LCL_REPORT DEFINITION.
*
  PUBLIC SECTION.

    TYPES: BEGIN OF TY_EXIT,
             INPUT     TYPE STRING,
             OUTPUT    TYPE STRING,
             TPDATAIN  TYPE STRING,
             TPDATAOUT TYPE STRING,
           END OF TY_EXIT.

    TYPES: BEGIN OF TY_COUNT,
             VALUE TYPE I,
             RMN   TYPE STRING,
           END OF TY_COUNT.


    DATA: IT_EXIT  TYPE STANDARD TABLE OF TY_EXIT,
          IT_DADOS TYPE TABLE OF TY_COUNT,
          IT_COUNT TYPE TABLE OF TY_COUNT,
          WA_EXIT  TYPE TY_EXIT,
          WA_DADOS TYPE TY_COUNT,
          WA_COUNT TYPE TY_COUNT,
          V_TYPE   TYPE STRING,
          O_ALV    TYPE REF TO CL_SALV_TABLE.

    DATA: V_STRING    TYPE TLINE-TDLINE.

    METHODS:
      GET_DATA,
      GENERATE_OUTPUT.

  PRIVATE SECTION.

    METHODS:
      SET_PF_STATUS
        CHANGING
          CO_ALV TYPE REF TO CL_SALV_TABLE.

    METHODS:
      SET_TOP_OF_PAGE
        CHANGING
          CO_ALV TYPE REF TO CL_SALV_TABLE.

    METHODS:
      SET_END_OF_PAGE
        CHANGING
          CO_ALV TYPE REF TO CL_SALV_TABLE.

    METHODS:
      SET_LAYOUT
        CHANGING
          CO_ALV TYPE REF TO CL_SALV_TABLE.

    METHODS:
      SET_DISPLAY_SETTING
        CHANGING
          CO_ALV TYPE REF TO CL_SALV_TABLE.

    METHODS:
      SET_COLUMNS
        CHANGING
          CO_ALV TYPE REF TO CL_SALV_TABLE.

*
ENDCLASS.

SELECTION-SCREEN BEGIN OF BLOCK B01 WITH FRAME TITLE TEXT-001.
PARAMETERS: P_NUM TYPE STRING,
            R1    RADIOBUTTON GROUP RAD1,
            R2    RADIOBUTTON GROUP RAD1.
SELECTION-SCREEN END OF BLOCK B01.

START-OF-SELECTION.
  DATA: LO_REPORT TYPE REF TO LCL_REPORT.

  CREATE OBJECT LO_REPORT.

  LO_REPORT->GET_DATA( ).
  LO_REPORT->GENERATE_OUTPUT( ).
*
*----------------------------------------------------------------------*
*       CLASS lcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS LCL_REPORT IMPLEMENTATION.

  METHOD GET_DATA.

    DATA: V_TDLCOUNT  TYPE ITCDP-TDLCOUNT,
          V_STRING    TYPE TLINE-TDLINE,
          V_HTYPE     TYPE DD01V-DATATYPE,
          V_COUNT     TYPE ITCDP-TDLCOUNT,
          V_NUM       TYPE STRING,
          V_TDNUMOUTL TYPE ITCDP-TDNUMOUTL.

    IF  R1 IS NOT INITIAL.
      V_TYPE = 'Arábico para Romano'.

      CALL FUNCTION 'NUMERIC_CHECK'
        EXPORTING
          STRING_IN = P_NUM
        IMPORTING
          HTYPE     = V_HTYPE.

      IF V_HTYPE NE 'NUMC'.
        MESSAGE 'Esta conversão só pode ser realizada com numeros' TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      V_TDLCOUNT = P_NUM.
      WA_EXIT-TPDATAIN   = 'ARABICO'.
      WA_EXIT-TPDATAOUT  = 'ROMANO'.

      DATA: V_TDUPPER    TYPE ITCDP-TDNUMBERIN,
            V_TDNUMBERIN TYPE  ITCDP-TDUPPER,
            V_TDNUMFIXC  TYPE ITCDP-TDNUMFIXC.

      V_TDUPPER = 'X'.
      V_TDNUMBERIN = 'ROMAN'.

      PERFORM CONVERT_NUMBER USING V_TDLCOUNT V_TDNUMBERIN V_TDUPPER
                                   V_TDNUMFIXC V_STRING.

      IMPORT CR_WORK TO V_STRING FROM MEMORY ID 'M_DADOS'.
      FREE MEMORY ID 'M_DADOS'.

      WA_EXIT-INPUT     = V_TDLCOUNT .
      WA_EXIT-OUTPUT    = V_STRING  .
      APPEND WA_EXIT TO IT_EXIT.

    ELSEIF R2 IS NOT INITIAL.
      V_TYPE = 'Romano para Arábico'.
      V_TDLCOUNT = 1.

      WA_EXIT-TPDATAIN   = 'ROMANO'.
      WA_EXIT-TPDATAOUT  = 'ARABICO'.
      V_TDUPPER = 'X'.
      V_TDNUMBERIN = 'ROMAN'.

      PERFORM CONVERT_NUMBER_R2 USING V_TDLCOUNT V_TDNUMBERIN V_TDUPPER
                                      V_TDNUMFIXC V_STRING.

      IMPORT IT_DATA TO IT_COUNT FROM MEMORY ID 'IT_DADOS'.
      FREE MEMORY ID 'IT_DADOS'.

      READ TABLE IT_COUNT INTO WA_COUNT WITH KEY RMN = P_NUM.
      IF SY-SUBRC = 0.
        WA_EXIT-INPUT     = P_NUM .
        WA_EXIT-OUTPUT    = WA_COUNT-VALUE.
        APPEND WA_EXIT TO IT_EXIT.
      ELSE.
        MESSAGE 'Numeral não encontrado' TYPE 'S' DISPLAY LIKE 'E'.

      ENDIF.

    ENDIF.

    CLEAR WA_EXIT.

  ENDMETHOD.


  METHOD GENERATE_OUTPUT.

    DATA: LX_MSG TYPE REF TO CX_SALV_MSG.
    TRY.
        CL_SALV_TABLE=>FACTORY(
          IMPORTING
            R_SALV_TABLE = O_ALV
          CHANGING
            T_TABLE      = IT_EXIT ).
      CATCH CX_SALV_MSG INTO LX_MSG.
    ENDTRY.

    CALL METHOD SET_PF_STATUS
      CHANGING
        CO_ALV = O_ALV.

    CALL METHOD ME->SET_TOP_OF_PAGE
      CHANGING
        CO_ALV = O_ALV.


    CALL METHOD ME->SET_END_OF_PAGE
      CHANGING
        CO_ALV = O_ALV.


    CALL METHOD SET_LAYOUT
      CHANGING
        CO_ALV = O_ALV.

    CALL METHOD SET_DISPLAY_SETTING
      CHANGING
        CO_ALV = O_ALV.


    CALL METHOD ME->SET_COLUMNS
      CHANGING
        CO_ALV = O_ALV.

    O_ALV->DISPLAY( ).

  ENDMETHOD.

  METHOD SET_PF_STATUS.

    DATA: LO_FUNCTIONS TYPE REF TO CL_SALV_FUNCTIONS_LIST.

    LO_FUNCTIONS = CO_ALV->GET_FUNCTIONS( ).
    LO_FUNCTIONS->SET_DEFAULT( ABAP_TRUE ).

    CO_ALV->SET_SCREEN_STATUS(
    PFSTATUS      =  'SALV_STANDARD'
    REPORT        =  'SALV_DEMO_TABLE_SELECTIONS'
    SET_FUNCTIONS = CO_ALV->C_FUNCTIONS_ALL ).

  ENDMETHOD.

  METHOD SET_TOP_OF_PAGE.

    DATA: LO_HEADER  TYPE REF TO CL_SALV_FORM_LAYOUT_GRID,
          LO_H_LABEL TYPE REF TO CL_SALV_FORM_LABEL,
          LO_H_FLOW  TYPE REF TO CL_SALV_FORM_LAYOUT_FLOW,
          V_COUNT    TYPE I.

    CREATE OBJECT LO_HEADER.


    LO_H_LABEL = LO_HEADER->CREATE_LABEL( ROW = 1 COLUMN = 1 ).
    LO_H_LABEL->SET_TEXT( 'Teste Conversão de Numeros' ).

    LO_H_FLOW = LO_HEADER->CREATE_FLOW( ROW = 3  COLUMN = 1 ).
    LO_H_FLOW->CREATE_TEXT( TEXT = 'Número de entrada: ' ).

    LO_H_FLOW = LO_HEADER->CREATE_FLOW( ROW = 3  COLUMN = 2 ).
    LO_H_FLOW->CREATE_TEXT( TEXT = P_NUM ).

    CO_ALV->SET_TOP_OF_LIST( LO_HEADER ).

    CO_ALV->SET_TOP_OF_LIST_PRINT( LO_HEADER ).

  ENDMETHOD.

  METHOD SET_END_OF_PAGE.

    DATA: LO_FOOTER  TYPE REF TO CL_SALV_FORM_LAYOUT_GRID,
          LO_F_LABEL TYPE REF TO CL_SALV_FORM_LABEL,
          LO_F_FLOW  TYPE REF TO CL_SALV_FORM_LAYOUT_FLOW.


    CREATE OBJECT LO_FOOTER.

    LO_F_LABEL = LO_FOOTER->CREATE_LABEL( ROW = 1 COLUMN = 1 ).
    LO_F_LABEL->SET_TEXT( 'Teste Conversão de Numeros' ).

    LO_F_FLOW = LO_FOOTER->CREATE_FLOW( ROW = 2  COLUMN = 1 ).
    LO_F_FLOW->CREATE_TEXT( TEXT = 'Conversão de: ' ).

    LO_F_FLOW = LO_FOOTER->CREATE_FLOW( ROW = 2  COLUMN = 2 ).
    LO_F_FLOW->CREATE_TEXT( TEXT = V_TYPE ).

    LO_F_FLOW = LO_FOOTER->CREATE_FLOW( ROW = 3  COLUMN = 2 ).
    LO_F_FLOW->CREATE_TEXT( TEXT = 1 ).

    CO_ALV->SET_END_OF_LIST( LO_FOOTER ).

    CO_ALV->SET_END_OF_LIST_PRINT( LO_FOOTER ).
*
  ENDMETHOD.

  METHOD SET_LAYOUT.

    DATA: LO_LAYOUT  TYPE REF TO CL_SALV_LAYOUT,
          LF_VARIANT TYPE SLIS_VARI,
          LS_KEY     TYPE SALV_S_LAYOUT_KEY.

    LO_LAYOUT = CO_ALV->GET_LAYOUT( ).

    LS_KEY-REPORT = SY-REPID.
    LO_LAYOUT->SET_KEY( LS_KEY ).
    LO_LAYOUT->SET_SAVE_RESTRICTION( IF_SALV_C_LAYOUT=>RESTRICT_NONE ).

    LF_VARIANT = 'DEFAULT'.
    LO_LAYOUT->SET_INITIAL_LAYOUT( LF_VARIANT ).

  ENDMETHOD.

  METHOD SET_DISPLAY_SETTING.

    DATA: LO_DISPLAY TYPE REF TO CL_SALV_DISPLAY_SETTINGS.

    LO_DISPLAY = CO_ALV->GET_DISPLAY_SETTINGS( ).

    LO_DISPLAY->SET_STRIPED_PATTERN( 'X' ).

    LO_DISPLAY->SET_LIST_HEADER( 'Conversor de números' ).

  ENDMETHOD.

  METHOD SET_COLUMNS.


    DATA: LO_COLS TYPE REF TO CL_SALV_COLUMNS.
    LO_COLS = O_ALV->GET_COLUMNS( ).
    LO_COLS->SET_OPTIMIZE( 'X' ).

    DATA: LO_COLUMN TYPE REF TO CL_SALV_COLUMN.

    TRY.
        LO_COLUMN = LO_COLS->GET_COLUMN( 'INPUT' ).
        LO_COLUMN->SET_LONG_TEXT( 'Numero de Entrada' ).
        LO_COLUMN->SET_MEDIUM_TEXT( 'Num. Entrada' ).
        LO_COLUMN->SET_SHORT_TEXT( 'Entrada' ).
        LO_COLUMN->SET_OUTPUT_LENGTH( 17 ).
      CATCH CX_SALV_NOT_FOUND.
    ENDTRY.

    TRY.
        LO_COLUMN = LO_COLS->GET_COLUMN( 'OUTPUT' ).
        LO_COLUMN->SET_LONG_TEXT( 'Numero de Saída' ).
        LO_COLUMN->SET_MEDIUM_TEXT( 'Num. Saída' ).
        LO_COLUMN->SET_SHORT_TEXT( 'Saída' ).
        LO_COLUMN->SET_OUTPUT_LENGTH( 17 ).
      CATCH CX_SALV_NOT_FOUND.
    ENDTRY.

    TRY.
        LO_COLUMN = LO_COLS->GET_COLUMN( 'TPDATAIN' ).
        LO_COLUMN->SET_LONG_TEXT( 'Tipo de Entrada' ).
        LO_COLUMN->SET_MEDIUM_TEXT( 'Tp. Entrada' ).
        LO_COLUMN->SET_SHORT_TEXT( 'Entrada' ).
        LO_COLUMN->SET_OUTPUT_LENGTH( 17 ).
      CATCH CX_SALV_NOT_FOUND.
    ENDTRY.

    TRY.
        LO_COLUMN = LO_COLS->GET_COLUMN( 'TPDATAOUT' ).
        LO_COLUMN->SET_LONG_TEXT( 'Tipo de Saída' ).
        LO_COLUMN->SET_MEDIUM_TEXT( 'Tp. Saída' ).
        LO_COLUMN->SET_SHORT_TEXT( 'Saída' ).
        LO_COLUMN->SET_OUTPUT_LENGTH( 17 ).
      CATCH CX_SALV_NOT_FOUND.
    ENDTRY.

  ENDMETHOD.
ENDCLASS.

FORM CONVERT_NUMBER USING CCOUNT
                          CTYP
                          CUPPER
                          CONVCOUNT
                          CONVLENGTH.


  DATA:
    CN_REST(4)  TYPE P,
    CN_WORK(21).

  CASE CTYP.
    WHEN 'R'. PERFORM CN_ROMAN     USING CCOUNT CUPPER  CN_WORK.
  ENDCASE.

  CONVLENGTH = STRLEN( CN_WORK ).
  WRITE CN_WORK TO CONVCOUNT(CONVLENGTH).

ENDFORM.
*
*
FORM CN_ROMAN USING COUNT
                    UPPER
                    ROMAN.

  DATA:
    CR_WORK(21),
    CR_COUNTC(5).

  CHECK COUNT > 0.
  CHECK COUNT <= 9999.

  WRITE COUNT TO CR_COUNTC NO-SIGN NO-ZERO.
  TRANSLATE CR_COUNTC USING '. '.
  CONDENSE CR_COUNTC  NO-GAPS.
  PACK CR_COUNTC TO CR_COUNTC.

  CASE CR_COUNTC(1).
    WHEN '1'. CR_WORK(9) = 'm        '.
    WHEN '2'. CR_WORK(9) = 'mm       '.
    WHEN '3'. CR_WORK(9) = 'mmm      '.
    WHEN '4'. CR_WORK(9) = 'mmmm     '.
    WHEN '5'. CR_WORK(9) = 'mmmmm    '.
    WHEN '6'. CR_WORK(9) = 'mmmmmm   '.
    WHEN '7'. CR_WORK(9) = 'mmmmmmm  '.
    WHEN '8'. CR_WORK(9) = 'mmmmmmmm '.
    WHEN '9'. CR_WORK(9) = 'mmmmmmmmm'.
  ENDCASE.

  CASE CR_COUNTC+1(1).
    WHEN '1'. CR_WORK+9(4) = 'c   '.
    WHEN '2'. CR_WORK+9(4) = 'cc  '.
    WHEN '3'. CR_WORK+9(4) = 'ccc '.
    WHEN '4'. CR_WORK+9(4) = 'cd  '.
    WHEN '5'. CR_WORK+9(4) = 'd   '.
    WHEN '6'. CR_WORK+9(4) = 'dc  '.
    WHEN '7'. CR_WORK+9(4) = 'dcc '.
    WHEN '8'. CR_WORK+9(4) = 'dccc'.
    WHEN '9'. CR_WORK+9(4) = 'dm  '.
  ENDCASE.

  CASE CR_COUNTC+2(1).
    WHEN '1'. CR_WORK+13(4) = 'x   '.
    WHEN '2'. CR_WORK+13(4) = 'xx  '.
    WHEN '3'. CR_WORK+13(4) = 'XXX '.
    WHEN '4'. CR_WORK+13(4) = 'xl  '.
    WHEN '5'. CR_WORK+13(4) = 'l   '.
    WHEN '6'. CR_WORK+13(4) = 'lx  '.
    WHEN '7'. CR_WORK+13(4) = 'lxx '.
    WHEN '8'. CR_WORK+13(4) = 'lxxx'.
    WHEN '9'. CR_WORK+13(4) = 'xc  '.
  ENDCASE.

  CASE CR_COUNTC+3(1).
    WHEN '1'. CR_WORK+17(4) = 'i   '.
    WHEN '2'. CR_WORK+17(4) = 'ii  '.
    WHEN '3'. CR_WORK+17(4) = 'iii '.
    WHEN '4'. CR_WORK+17(4) = 'iv  '.
    WHEN '5'. CR_WORK+17(4) = 'v   '.
    WHEN '6'. CR_WORK+17(4) = 'vi  '.
    WHEN '7'. CR_WORK+17(4) = 'vii '.
    WHEN '8'. CR_WORK+17(4) = 'viii'.
    WHEN '9'. CR_WORK+17(4) = 'ix  '.
  ENDCASE.

  CONDENSE CR_WORK NO-GAPS.

  IF UPPER > SPACE.
    TRANSLATE CR_WORK TO UPPER CASE.
  ENDIF.

  WRITE CR_WORK(21) TO ROMAN(21).

  EXPORT: CR_WORK TO MEMORY ID 'M_DADOS'.

ENDFORM.

FORM CONVERT_NUMBER_R2 USING CCOUNT
                             CTYP
                             CUPPER
                             CONVCOUNT
                             CONVLENGTH.

  DATA:
    CN_REST(4)  TYPE P,
    CN_WORK(21).

  CASE CTYP.
    WHEN 'R'. PERFORM CN_ROMAN_R2     USING CCOUNT CUPPER  CN_WORK.
  ENDCASE.

  CONVLENGTH = STRLEN( CN_WORK ).
  WRITE CN_WORK TO CONVCOUNT(CONVLENGTH).

ENDFORM.

FORM CN_ROMAN_R2 USING COUNT
                       UPPER
                       ROMAN.

  TYPES: BEGIN OF TY_COUNT,
           VALUE TYPE I,
           RMN   TYPE STRING,
         END OF TY_COUNT.

  DATA: WA_DATA TYPE TY_COUNT,
        IT_DATA TYPE TABLE OF TY_COUNT.

  COUNT = 1.
  DATA:
    CR_WORK(21),
    CR_COUNTC(5).

  DO 9998 TIMES.

    WRITE COUNT TO CR_COUNTC NO-SIGN NO-ZERO.
    TRANSLATE CR_COUNTC USING '. '.
    CONDENSE CR_COUNTC  NO-GAPS.
    PACK CR_COUNTC TO CR_COUNTC.

    CASE CR_COUNTC(1).
      WHEN '1'. CR_WORK(9) = 'm        '.
      WHEN '2'. CR_WORK(9) = 'mm       '.
      WHEN '3'. CR_WORK(9) = 'mmm      '.
      WHEN '4'. CR_WORK(9) = 'mmmm     '.
      WHEN '5'. CR_WORK(9) = 'mmmmm    '.
      WHEN '6'. CR_WORK(9) = 'mmmmmm   '.
      WHEN '7'. CR_WORK(9) = 'mmmmmmm  '.
      WHEN '8'. CR_WORK(9) = 'mmmmmmmm '.
      WHEN '9'. CR_WORK(9) = 'mmmmmmmmm'.
    ENDCASE.

    CASE CR_COUNTC+1(1).
      WHEN '1'. CR_WORK+9(4) = 'c   '.
      WHEN '2'. CR_WORK+9(4) = 'cc  '.
      WHEN '3'. CR_WORK+9(4) = 'ccc '.
      WHEN '4'. CR_WORK+9(4) = 'cd  '.
      WHEN '5'. CR_WORK+9(4) = 'd   '.
      WHEN '6'. CR_WORK+9(4) = 'dc  '.
      WHEN '7'. CR_WORK+9(4) = 'dcc '.
      WHEN '8'. CR_WORK+9(4) = 'dccc'.
      WHEN '9'. CR_WORK+9(4) = 'dm  '.
    ENDCASE.

    CASE CR_COUNTC+2(1).
      WHEN '1'. CR_WORK+13(4) = 'x   '.
      WHEN '2'. CR_WORK+13(4) = 'xx  '.
      WHEN '3'. CR_WORK+13(4) = 'XXX '.
      WHEN '4'. CR_WORK+13(4) = 'xl  '.
      WHEN '5'. CR_WORK+13(4) = 'l   '.
      WHEN '6'. CR_WORK+13(4) = 'lx  '.
      WHEN '7'. CR_WORK+13(4) = 'lxx '.
      WHEN '8'. CR_WORK+13(4) = 'lxxx'.
      WHEN '9'. CR_WORK+13(4) = 'xc  '.
    ENDCASE.

    CASE CR_COUNTC+3(1).
      WHEN '1'. CR_WORK+17(4) = 'i   '.
      WHEN '2'. CR_WORK+17(4) = 'ii  '.
      WHEN '3'. CR_WORK+17(4) = 'iii '.
      WHEN '4'. CR_WORK+17(4) = 'iv  '.
      WHEN '5'. CR_WORK+17(4) = 'v   '.
      WHEN '6'. CR_WORK+17(4) = 'vi  '.
      WHEN '7'. CR_WORK+17(4) = 'vii '.
      WHEN '8'. CR_WORK+17(4) = 'viii'.
      WHEN '9'. CR_WORK+17(4) = 'ix  '.
    ENDCASE.

    CONDENSE CR_WORK NO-GAPS.

    IF UPPER > SPACE.
      TRANSLATE CR_WORK TO UPPER CASE.
    ENDIF.

    WRITE CR_WORK(21) TO ROMAN(21).

    WA_DATA-VALUE = COUNT.
    WA_DATA-RMN   = ROMAN.
    APPEND WA_DATA TO IT_DATA.

    COUNT = COUNT + 1.
    CLEAR WA_DATA.
    CLEAR CR_WORK.
    CLEAR ROMAN.
  ENDDO.

  EXPORT: IT_DATA TO MEMORY ID 'IT_DADOS'.

ENDFORM.
